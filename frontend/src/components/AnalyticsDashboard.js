import React, { useState, useEffect } from 'react';
import { 
  BarChart3, 
  TrendingUp, 
  PieChart, 
  Activity, 
  Download, 
  Share2, 
  Calendar,
  MapPin,
  Package,
  DollarSign,
  Users,
  Settings,
  RefreshCw,
  Eye,
  EyeOff,
  ChevronDown,
  ChevronRight
} from 'lucide-react';
import AnalyticsDisplay from './AnalyticsDisplay';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  AreaChart,
  Area
} from 'recharts';
import ChartComponents from './ChartComponents';

const AnalyticsDashboard = ({ analysisId, analysisData, onRefresh, onExport, onShare, datasetInfo }) => {
  const [activeTab, setActiveTab] = useState('overview');
  const [selectedAnalytics, setSelectedAnalytics] = useState([]);
  const [expandedSections, setExpandedSections] = useState({
    descriptive: true,
    predictive: true,
    visualizations: true
  });

  // Debug logging
  console.log("🔍 AnalyticsDashboard received props:");
  console.log("🔍 analysisId:", analysisId);
  console.log("🔍 analysisData:", analysisData);
  console.log("🔍 datasetInfo:", datasetInfo);

  // Extract real analytics data from analysisData prop
  const getAnalyticsData = () => {
    if (!analysisData) return { descriptive: [], predictive: [] };
    
    const descriptive = [];
    const predictive = [];
    
    // Try to get analytics from clean architecture first (analysis.charts)
    let analytics = [];
    if (analysisData.analysis?.charts && analysisData.analysis.charts.length > 0) {
      console.log("📊 Found charts in clean architecture format:", analysisData.analysis.charts);
      // Convert charts to analytics format
      analytics = analysisData.analysis.charts.map((chart, index) => ({
        id: chart.id || `chart_${index}`,
        name: chart.title || chart.type || `Analytics ${index + 1}`,
        type: chart.type || 'descriptive',
        status: chart.status || 'completed',
        confidence: 95, // Clean architecture charts are high confidence
        description: chart.description || 'Generated by TANAW clean architecture',
        data: chart.data || [],
        insights: [chart.description || 'Clean architecture visualization'],
        results: chart,
        metrics: {},
        visualization: chart
      }));
    }
    // Fallback to old format (analysis.analytics)
    else if (analysisData.analysis?.analytics) {
      console.log("📊 Found analytics in old format:", analysisData.analysis.analytics);
      analytics = analysisData.analysis.analytics;
    }
    
    // Process each analytic result
    analytics.forEach((analytic) => {
      const analyticData = {
        id: analytic.id || analytic.name?.toLowerCase().replace(/\s+/g, '_'),
        name: analytic.name || analytic.type,
        type: analytic.category || analytic.type,
        status: analytic.status || 'completed',
        confidence: analytic.confidence || analytic.score || 85,
        description: analytic.description || analytic.summary,
        data: analytic.data || analytic.results || analytic.chart_data || [],
        insights: analytic.insights || analytic.recommendations || [],
        results: analytic.results || {},
        metrics: analytic.metrics || {},
        visualization: analytic.visualization || null
      };
      
      // Categorize by type
      if (analytic.category === 'descriptive' || analytic.type === 'descriptive') {
        descriptive.push(analyticData);
      } else if (analytic.category === 'predictive' || analytic.type === 'predictive') {
        predictive.push(analyticData);
      } else {
        // Default to descriptive if type is unclear
        descriptive.push(analyticData);
      }
    });
    
    return { descriptive, predictive };
  };

  const analyticsData = getAnalyticsData();

  // Calculate real statistics from analysisData
  const getOverviewStats = () => {
    if (!analysisData) {
      return {
        totalSales: 0,
        totalProducts: 0,
        totalRegions: 0,
        totalAnalytics: 0,
        salesGrowth: 0,
        productsGrowth: 0
      };
    }

    // Try clean architecture format first
    const summaryMetrics = analysisData.analysis?.summary_metrics || {};
    const charts = analysisData.analysis?.charts || [];
    const analyticsReadiness = analysisData.analytics_readiness || {};

    // Fallback to old format
    const summary = analysisData.analysis?.summary || {};
    const analytics = analysisData.analysis?.analytics || [];

    return {
      totalSales: summaryMetrics.total_sales || summary.total_sales || summary.total_amount || 0,
      totalProducts: summaryMetrics.total_products || summary.total_products || summary.unique_products || 0,
      totalRegions: summaryMetrics.total_regions || summary.total_regions || summary.unique_regions || 0,
      totalAnalytics: analyticsReadiness.ready_count || analyticsReadiness.ready_analytics || charts.length || analytics.length || 0,
      salesGrowth: summaryMetrics.sales_growth || summary.sales_growth || summary.growth_rate || 0,
      productsGrowth: summary.products_growth || 0
    };
  };

  const overviewStats = getOverviewStats();

  const tabs = [
    { id: 'overview', name: 'Overview', icon: BarChart3 },
    { id: 'descriptive', name: 'Descriptive Analytics', icon: Activity },
    { id: 'predictive', name: 'Predictive Analytics', icon: TrendingUp },
    { id: 'visualizations', name: 'Visualizations', icon: PieChart },
    { id: 'insights', name: 'Insights', icon: Eye }
  ];

  const toggleSection = (section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const getAnalyticsByType = (type) => {
    if (type === 'descriptive') return analyticsData.descriptive;
    if (type === 'predictive') return analyticsData.predictive;
    return [...analyticsData.descriptive, ...analyticsData.predictive];
  };

  const getChartComponent = (analytic) => {
    // Use real data from the analytic
    const chartData = analytic.data || analytic.results?.chart_data || analytic.visualization?.data || [];
    
    // If no data available, show message
    if (!chartData || chartData.length === 0) {
      return (
        <div className="text-center text-gray-500 p-8">
          <BarChart3 className="w-12 h-12 mx-auto mb-4 text-gray-400" />
          <p>No visualization data available</p>
          <p className="text-xs mt-2">Data is being processed or not yet generated.</p>
        </div>
      );
    }

    // Determine chart type based on analytic name/type
    const analyticName = analytic.name?.toLowerCase() || '';
    
    if (analyticName.includes('sales') && analyticName.includes('summary')) {
      return <ChartComponents.SalesTrendChart data={chartData} title={analytic.name} />;
    } else if (analyticName.includes('product')) {
      return <ChartComponents.ProductPerformanceChart data={chartData} title={analytic.name} />;
    } else if (analyticName.includes('regional') || analyticName.includes('region')) {
      return <ChartComponents.RegionalDistributionChart data={chartData} title={analytic.name} />;
    } else {
      // Generic visualization for other analytics
      return <ChartComponents.SalesTrendChart data={chartData} title={analytic.name} />;
    }
  };

  // Get GPT analytics readiness
  const getGPTAnalyticsReadiness = () => {
    if (analysisData?.analytics_readiness) {
      return analysisData.analytics_readiness;
    }
    
    // Fallback to default structure
    return {
      available_analytics: [],
      unavailable_analytics: [],
      ready_count: 0,
      total_count: 5
    };
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'processing': return 'bg-yellow-100 text-yellow-800';
      case 'error': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getConfidenceColor = (confidence) => {
    if (confidence >= 90) return 'text-green-600';
    if (confidence >= 80) return 'text-yellow-600';
    return 'text-red-600';
  };

  // Render predictive analytics chart
  const renderPredictiveChart = (analytic) => {
    // Use real forecast data from the analytic
    const forecastData = analytic.data || analytic.results?.forecast_data || analytic.results?.predictions || [];
    
    if (!forecastData || forecastData.length === 0) {
      return (
        <div className="text-center text-gray-500 p-8">
          <TrendingUp className="w-12 h-12 mx-auto mb-4 text-gray-400" />
          <p>No forecast data available</p>
          <p className="text-xs mt-2">The predictive model did not generate forecast data.</p>
        </div>
      );
    }

    // Use the real data directly from backend
    const chartData = forecastData;

    return (
      <div className="p-6">
        <div className="mb-4">
          <h4 className="text-lg font-medium text-gray-900 mb-2">{analytic.name}</h4>
          <p className="text-sm text-gray-600">{analytic.description}</p>
        </div>
        
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <AreaChart data={chartData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis 
                dataKey="period" 
                tick={{ fontSize: 12 }}
                axisLine={{ stroke: '#e5e7eb' }}
              />
              <YAxis 
                tick={{ fontSize: 12 }}
                axisLine={{ stroke: '#e5e7eb' }}
              />
              <Tooltip 
                contentStyle={{
                  backgroundColor: 'white',
                  border: '1px solid #e5e7eb',
                  borderRadius: '8px',
                  boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                }}
                formatter={(value, name) => {
                  if (name === 'forecast') return [value?.toLocaleString(), 'Forecast'];
                  if (name === 'confidence_lower') return [value?.toLocaleString(), 'Lower Bound'];
                  if (name === 'confidence_upper') return [value?.toLocaleString(), 'Upper Bound'];
                  return [value, name];
                }}
              />
              <Area
                type="monotone"
                dataKey="confidence_upper"
                stackId="1"
                stroke="#3b82f6"
                fill="#3b82f6"
                fillOpacity={0.1}
              />
              <Area
                type="monotone"
                dataKey="confidence_lower"
                stackId="1"
                stroke="#3b82f6"
                fill="#3b82f6"
                fillOpacity={0.1}
              />
              <Line
                type="monotone"
                dataKey="forecast"
                stroke="#1d4ed8"
                strokeWidth={3}
                dot={{ fill: '#1d4ed8', strokeWidth: 2, r: 4 }}
                activeDot={{ r: 6, stroke: '#1d4ed8', strokeWidth: 2 }}
              />
            </AreaChart>
          </ResponsiveContainer>
        </div>
        
        <div className="mt-4 flex justify-center">
          <div className="flex items-center space-x-6 text-sm">
            <div className="flex items-center">
              <div className="w-3 h-3 bg-blue-600 rounded-full mr-2"></div>
              <span className="text-gray-600">Forecast</span>
            </div>
            <div className="flex items-center">
              <div className="w-3 h-3 bg-blue-600 bg-opacity-20 rounded-full mr-2"></div>
              <span className="text-gray-600">Confidence Interval</span>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="analytics-dashboard bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Analytics Dashboard</h1>
            <p className="text-gray-600">
              {datasetInfo?.name ? `Dataset: ${datasetInfo.name}` : `Analysis ID: ${analysisId}`}
            </p>
            {datasetInfo?.uploadDate && (
              <p className="text-sm text-gray-500">
                Uploaded: {datasetInfo.uploadDate} at {datasetInfo.uploadTime}
              </p>
            )}
          </div>
          <div className="flex items-center gap-3">
            <button
              onClick={onRefresh}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 flex items-center gap-2"
            >
              <RefreshCw className="w-4 h-4" />
              Refresh
            </button>
            <button
              onClick={onExport}
              className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </button>
            <button
              onClick={onShare}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 flex items-center gap-2"
            >
              <Share2 className="w-4 h-4" />
              Share
            </button>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="bg-white border-b border-gray-200 px-6">
        <nav className="flex space-x-8">
          {tabs.map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center gap-2 ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <Icon className="w-4 h-4" />
                {tab.name}
              </button>
            );
          })}
        </nav>
      </div>


      {/* Main Content */}
      <div className="px-6 py-6">
        {activeTab === 'overview' && (
          <div className="space-y-6">
            {/* Summary Cards */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="bg-white p-6 rounded-lg border border-gray-200">
                <div className="flex items-center">
                  <DollarSign className="w-8 h-8 text-green-600" />
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Total Sales</p>
                    <p className="text-2xl font-bold text-gray-900">
                      {overviewStats.totalSales > 0 
                        ? `₱${overviewStats.totalSales.toLocaleString()}` 
                        : 'N/A'}
                    </p>
                    {overviewStats.salesGrowth !== 0 && (
                      <p className={`text-sm flex items-center ${overviewStats.salesGrowth > 0 ? 'text-green-600' : 'text-red-600'}`}>
                        <TrendingUp className="w-3 h-3 mr-1" />
                        {overviewStats.salesGrowth > 0 ? '+' : ''}{overviewStats.salesGrowth.toFixed(1)}%
                      </p>
                    )}
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg border border-gray-200">
                <div className="flex items-center">
                  <Package className="w-8 h-8 text-blue-600" />
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Products</p>
                    <p className="text-2xl font-bold text-gray-900">
                      {overviewStats.totalProducts > 0 
                        ? overviewStats.totalProducts.toLocaleString() 
                        : 'N/A'}
                    </p>
                    {overviewStats.productsGrowth !== 0 && (
                      <p className={`text-sm flex items-center ${overviewStats.productsGrowth > 0 ? 'text-blue-600' : 'text-red-600'}`}>
                        <TrendingUp className="w-3 h-3 mr-1" />
                        {overviewStats.productsGrowth > 0 ? '+' : ''}{overviewStats.productsGrowth.toFixed(1)}%
                      </p>
                    )}
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg border border-gray-200">
                <div className="flex items-center">
                  <MapPin className="w-8 h-8 text-purple-600" />
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Regions</p>
                    <p className="text-2xl font-bold text-gray-900">
                      {overviewStats.totalRegions > 0 
                        ? overviewStats.totalRegions 
                        : 'N/A'}
                    </p>
                    <p className="text-sm text-purple-600">
                      {overviewStats.totalRegions > 0 ? 'Active' : 'No data'}
                    </p>
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg border border-gray-200">
                <div className="flex items-center">
                  <BarChart3 className="w-8 h-8 text-orange-600" />
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Analytics</p>
                    <p className="text-2xl font-bold text-gray-900">
                      {overviewStats.totalAnalytics}
                    </p>
                    <p className="text-sm text-orange-600">
                      {overviewStats.totalAnalytics > 0 ? 'Completed' : 'Pending'}
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* GPT Analytics Readiness */}
            {analysisData?.analytics_readiness && (
              <div className="bg-white rounded-lg border border-gray-200">
                <div className="p-6 border-b border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                    🤖 GPT Analytics Readiness
                  </h3>
                </div>
                <div className="p-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Available Analytics */}
                    <div>
                      <h4 className="text-md font-medium text-green-800 mb-3">
                        ✅ Ready Analytics ({analysisData.analytics_readiness.ready_count})
                      </h4>
                      <div className="space-y-2">
                        {analysisData.analytics_readiness.available_analytics.map((analytic, idx) => (
                          <div key={idx} className="flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg">
                            <div>
                              <p className="font-medium text-green-800">{analytic.name}</p>
                              <p className="text-sm text-green-600">
                                Required: {analytic.required_columns.join(', ')}
                                {analytic.available_optional.length > 0 && (
                                  <span className="ml-2 text-xs">
                                    (+{analytic.available_optional.length} optional)
                                  </span>
                                )}
                              </p>
                            </div>
                            <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                              Ready
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Unavailable Analytics */}
                    <div>
                      <h4 className="text-md font-medium text-red-800 mb-3">
                        ❌ Missing Analytics ({analysisData.analytics_readiness.unavailable_analytics.length})
                      </h4>
                      <div className="space-y-2">
                        {analysisData.analytics_readiness.unavailable_analytics.map((analytic, idx) => (
                          <div key={idx} className="flex items-center justify-between p-3 bg-red-50 border border-red-200 rounded-lg">
                            <div>
                              <p className="font-medium text-red-800">{analytic.name}</p>
                              <p className="text-sm text-red-600">
                                Missing: {analytic.missing_columns.join(', ')}
                              </p>
                            </div>
                            <span className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">
                              Disabled
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                  
                  {/* GPT Mapping Summary */}
                  {analysisData?.gpt_metadata && (
                    <div className="mt-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-200">
                      <h5 className="font-medium text-gray-800 mb-2">GPT Mapping Summary</h5>
                      <div className="grid grid-cols-3 gap-4 text-center">
                        <div>
                          <p className="text-lg font-bold text-blue-600">
                            ${analysisData.gpt_metadata.total_cost?.toFixed(4) || '0.0000'}
                          </p>
                          <p className="text-xs text-gray-600">Cost</p>
                        </div>
                        <div>
                          <p className="text-lg font-bold text-green-600">
                            {analysisData.gpt_metadata.cache_hits || 0}
                          </p>
                          <p className="text-xs text-gray-600">Cache Hits</p>
                        </div>
                        <div>
                          <p className="text-lg font-bold text-purple-600">
                            {analysisData.gpt_metadata.processing_time?.toFixed(2) || '0.00'}s
                          </p>
                          <p className="text-xs text-gray-600">Time</p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Recent Analytics */}
            <div className="bg-white rounded-lg border border-gray-200">
              <div className="p-6 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">Recent Analytics</h3>
              </div>
              <div className="p-6">
                <div className="space-y-4">
                  {getAnalyticsByType('all').slice(0, 3).map((analytic) => (
                    <div key={analytic.id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                      <div className="flex items-center gap-4">
                        <div className="p-2 bg-blue-100 rounded-lg">
                          {analytic.type === 'descriptive' ? <Activity className="w-5 h-5 text-blue-600" /> : <TrendingUp className="w-5 h-5 text-blue-600" />}
                        </div>
                        <div>
                          <h4 className="font-medium text-gray-900">{analytic.name}</h4>
                          <p className="text-sm text-gray-600">{analytic.description}</p>
                        </div>
                      </div>
                      <div className="flex items-center gap-3">
                        <span className={`px-2 py-1 rounded-full text-xs font-semibold ${getStatusColor(analytic.status)}`}>
                          {analytic.status}
                        </span>
                        <span className={`text-sm font-medium ${getConfidenceColor(analytic.confidence)}`}>
                          {analytic.confidence}%
                        </span>
                        <button className="text-blue-600 hover:text-blue-800">
                          <Eye className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'descriptive' && (
          <div className="space-y-6">
            {analyticsData.descriptive.map((analytic) => (
              <div key={analytic.id} className="bg-white rounded-lg border border-gray-200">
                <div className="p-6 border-b border-gray-200">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">{analytic.name}</h3>
                      <p className="text-gray-600">{analytic.description}</p>
                    </div>
                    <div className="flex items-center gap-3">
                      <span className={`px-2 py-1 rounded-full text-xs font-semibold ${getStatusColor(analytic.status)}`}>
                        {analytic.status}
                      </span>
                      <span className={`text-sm font-medium ${getConfidenceColor(analytic.confidence)}`}>
                        {analytic.confidence}% confidence
                      </span>
                    </div>
                  </div>
                </div>
                <div className="p-6">
                  {getChartComponent(analytic)}
                  {analytic.insights && (
                    <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                      <h4 className="font-medium text-gray-900 mb-2">Key Insights</h4>
                      <ul className="space-y-1">
                        {analytic.insights.map((insight, index) => (
                          <li key={index} className="text-sm text-gray-700">• {insight}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}

        {activeTab === 'predictive' && (
          <div className="space-y-6">
            {analyticsData.predictive.map((analytic) => (
              <div key={analytic.id} className="bg-white rounded-lg border border-gray-200">
                <div className="p-6 border-b border-gray-200">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">{analytic.name}</h3>
                      <p className="text-gray-600">{analytic.description}</p>
                    </div>
                    <div className="flex items-center gap-3">
                      <span className={`px-2 py-1 rounded-full text-xs font-semibold ${getStatusColor(analytic.status)}`}>
                        {analytic.status}
                      </span>
                      <span className={`text-sm font-medium ${getConfidenceColor(analytic.confidence)}`}>
                        {analytic.confidence}% confidence
                      </span>
                    </div>
                  </div>
                </div>
                {renderPredictiveChart(analytic)}
                {analytic.insights && analytic.insights.length > 0 && (
                  <div className="px-6 pb-6">
                    <div className="p-4 bg-gray-50 rounded-lg">
                      <h4 className="font-medium text-gray-900 mb-2">Forecasting Insights</h4>
                      <ul className="space-y-1">
                        {analytic.insights.map((insight, index) => (
                          <li key={index} className="text-sm text-gray-700">• {insight}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}

        {activeTab === 'visualizations' && (
          <div className="space-y-6">
            <AnalyticsDisplay 
              analysisData={analysisData}
              analyticsResults={{
                analytics: getAnalyticsByType('all'),
                charts: [],
                insights: [],
                summary: {}
              }}
              onExport={onExport}
              onShare={onShare}
            />
          </div>
        )}

        {activeTab === 'insights' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg border border-gray-200">
              <div className="p-6 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">Key Insights & Recommendations</h3>
              </div>
              <div className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
                      Business Insights
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full font-medium">
                        Descriptive Analytics
                      </span>
                    </h4>
                    <ul className="space-y-2">
                      {analysisData?.analysis?.insights && analysisData.analysis.insights.length > 0 ? (
                        analysisData.analysis.insights.map((insight, index) => (
                          <li key={index} className="text-sm text-gray-700 flex items-start gap-2">
                            <TrendingUp className="w-4 h-4 text-green-600 mt-0.5 flex-shrink-0" />
                            {insight}
                          </li>
                        ))
                      ) : (
                        <li className="text-sm text-gray-500">No insights available yet. Insights will be generated after analyzing your data.</li>
                      )}
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
                      Recommendations
                      <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full font-medium">
                        Prescriptive Analytics
                      </span>
                    </h4>
                    <ul className="space-y-2">
                      {analysisData?.analysis?.recommendations && analysisData.analysis.recommendations.length > 0 ? (
                        analysisData.analysis.recommendations.map((recommendation, index) => (
                          <li key={index} className="text-sm text-gray-700 flex items-start gap-2">
                            <Activity className="w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0" />
                            {recommendation}
                          </li>
                        ))
                      ) : (
                        <li className="text-sm text-gray-500">No recommendations available yet. Recommendations will be generated after analyzing your data.</li>
                      )}
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AnalyticsDashboard;
