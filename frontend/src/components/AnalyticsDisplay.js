import React, { useState, useEffect } from 'react';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  ResponsiveContainer,
  AreaChart,
  Area,
  ScatterChart,
  Scatter,
  ComposedChart
} from 'recharts';
import { 
  Download, 
  Share2, 
  Eye, 
  BarChart3, 
  TrendingUp, 
  PieChart as PieChartIcon,
  Activity,
  MapPin,
  Calendar,
  DollarSign,
  Package,
  Users,
  ArrowUpRight,
  ArrowDownRight,
  Info
} from 'lucide-react';

const AnalyticsDisplay = ({ analysisData, analyticsResults, onExport, onShare }) => {
  const [selectedAnalytic, setSelectedAnalytic] = useState(null);
  const [viewMode, setViewMode] = useState('grid'); // 'grid' or 'list'
  const [expandedCharts, setExpandedCharts] = useState({});

  // Get real charts from analysis data or fallback to sample data
  const getChartsData = () => {
    // Try to get charts from GPT mapping results first
    if (analysisData?.results?.phase8_visualization?.charts) {
      const charts = Object.values(analysisData.results.phase8_visualization.charts);
      console.log("📊 Using GPT-generated charts:", charts);
      return charts.map(chart => ({
        id: chart.id || 'chart_' + Math.random(),
        title: chart.title || 'GPT Generated Chart',
        type: chart.chart_type || 'line',
        description: chart.description || 'Generated by GPT mapping',
        data: chart.series || [],
        insights: [chart.alt_text || 'GPT-generated visualization']
      }));
    }
    
    // Try to get charts from clean architecture format
    if (analysisData?.analysis?.charts && analysisData.analysis.charts.length > 0) {
      console.log("📊 Using real charts from clean architecture:", analysisData.analysis.charts);
      return analysisData.analysis.charts.map((chart, index) => {
        // Convert {x: [...], y: [...]} format to Recharts format
        let convertedData = [];
        if (chart.data && chart.data.x && chart.data.y) {
          convertedData = chart.data.x.map((x, i) => ({
            x: x,
            y: chart.data.y[i],
            date: x, // For time series charts
            value: chart.data.y[i] // For value charts
          }));
        }
        
        console.log(`📊 Chart ${index}:`, {
          id: chart.id,
          title: chart.title,
          type: chart.type,
          dataLength: convertedData.length,
          sampleData: convertedData.slice(0, 3),
          originalData: chart.data,
          hasX: !!chart.data?.x,
          hasY: !!chart.data?.y,
          xLength: chart.data?.x?.length,
          yLength: chart.data?.y?.length
        });
        
        return {
          id: chart.id || `chart_${index}`,
          title: chart.title || chart.type || 'Analytics Chart',
          type: chart.type || 'line',
          description: chart.description || 'Generated by TANAW clean architecture',
          data: convertedData,
          insights: [chart.description || 'Clean architecture visualization'],
          x_axis: 'x',
          y_axis: 'y'
        };
      });
    }
    
    // Try to get charts from analyticsResults
    if (analyticsResults?.charts && analyticsResults.charts.length > 0) {
      console.log("📊 Using real charts from analyticsResults:", analyticsResults.charts);
      return analyticsResults.charts;
    }
    
    // Check if GPT mapping was successful but no charts generated yet
    if (analysisData?.mapped_columns && analysisData.mapped_columns.length > 0) {
      console.log("📊 GPT mapping successful, but charts not yet generated");
      return [
        {
          id: 'gpt_mapping_success',
          title: 'GPT Mapping Successful',
          type: 'info',
          description: 'Your columns have been successfully mapped by GPT. Analytics are being prepared.',
          data: [],
          insights: [
            `✅ ${analysisData.mapped_columns.length} columns mapped successfully`,
            `💰 Cost: $${analysisData.total_cost?.toFixed(4) || '0.0000'}`,
            `⚡ Cache hits: ${analysisData.cache_hits || 0}`,
            `🕒 Processing time: ${analysisData.processing_time?.toFixed(2) || '0.00'}s`
          ]
        }
      ];
    }
    
    // Fallback to sample data if no real data available
    console.log("⚠️ No real charts found, using sample data");
    return [
      {
        id: 'no_data',
        title: 'No Visualizations Available',
        type: 'line',
        description: 'No chart data was generated from your dataset',
        data: [],
        insights: ['Upload a dataset with proper column mappings to see visualizations']
      }
    ];
  };

  const chartsData = getChartsData();

  const getChartComponent = (chart) => {
    // Handle empty or missing data
    if (!chart.data || chart.data.length === 0) {
      return (
        <div className="text-center text-gray-500 py-8">
          <BarChart3 className="w-12 h-12 mx-auto mb-2 text-gray-400" />
          <p>No data available for this chart</p>
        </div>
      );
    }

    const commonProps = {
      width: expandedCharts[chart.id] ? 800 : 400,
      height: expandedCharts[chart.id] ? 400 : 300,
      data: chart.data
    };

    // Determine chart type from backend or fallback to 'line'
    const chartType = chart.type || chart.chart_type || 'line';

    // Handle clean architecture data format
    let xAxisKey = chart.x_axis || "date";
    let yAxisKey = chart.y_axis || "value";
    
    // If data has x and y arrays, convert to chart format
    if (chart.data && chart.data.x && chart.data.y) {
      const chartData = chart.data.x.map((x, index) => ({
        [xAxisKey]: x,
        [yAxisKey]: chart.data.y[index]
      }));
      commonProps.data = chartData;
    }

    switch (chartType) {
      case 'line':
        return (
          <LineChart {...commonProps}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey={xAxisKey} />
            <YAxis />
            <Tooltip />
            <Line type="monotone" dataKey={yAxisKey} stroke="#8884d8" strokeWidth={2} />
          </LineChart>
        );
      
      case 'bar':
        return (
          <BarChart {...commonProps}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey={xAxisKey} />
            <YAxis />
            <Tooltip />
            <Bar dataKey={yAxisKey} fill="#8884d8" />
          </BarChart>
        );
      
      case 'pie':
        return (
          <PieChart {...commonProps}>
            <Pie
              data={chart.data}
              cx={expandedCharts[chart.id] ? 400 : 200}
              cy={expandedCharts[chart.id] ? 200 : 150}
              outerRadius={expandedCharts[chart.id] ? 120 : 80}
              fill="#8884d8"
              dataKey={chart.value_key || "value"}
              label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
            >
              {chart.data.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={entry.color || `#${Math.floor(Math.random()*16777215).toString(16)}`} />
              ))}
            </Pie>
            <Tooltip />
          </PieChart>
        );
      
      case 'scatter':
        return (
          <ScatterChart {...commonProps}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey={chart.x_axis || "quantity"} name="X" />
            <YAxis dataKey={chart.y_axis || "sales"} name="Y" />
            <Tooltip cursor={{ strokeDasharray: '3 3' }} />
            <Scatter dataKey={chart.y_axis || "sales"} fill="#8884d8" />
          </ScatterChart>
        );
      
      default:
        return (
          <div className="text-center text-gray-500 py-8">
            <BarChart3 className="w-12 h-12 mx-auto mb-2 text-gray-400" />
            <p>Unsupported chart type: {chartType}</p>
          </div>
        );
    }
  };

  const toggleChartExpansion = (chartId) => {
    setExpandedCharts(prev => ({
      ...prev,
      [chartId]: !prev[chartId]
    }));
  };

  const getAnalyticsSummary = () => {
    // Try to get summary from analysisData first
    if (analysisData?.analysis) {
      const analysis = analysisData.analysis;
      return {
        totalAnalytics: analysis.analytics?.length || 0,
        totalCharts: analysis.charts?.length || 0,
        insights: analysis.insights || analysis.summary_insights || [],
        summary: analysis.summary || analysis.summary_metrics || {}
      };
    }
    
    // Fallback to analyticsResults
    if (analyticsResults) {
      return {
        totalAnalytics: analyticsResults.analytics?.length || 0,
        totalCharts: analyticsResults.charts?.length || 0,
        insights: analyticsResults.insights || [],
        summary: analyticsResults.summary || {}
      };
    }

    return null;
  };

  const summary = getAnalyticsSummary();

  return (
    <div className="analytics-display">
      {/* Header */}
      <div className="mb-6">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Analytics & Visualizations</h2>
            <p className="text-gray-600">Comprehensive insights from your data analysis</p>
          </div>
          <div className="flex items-center gap-3">
            <button
              onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {viewMode === 'grid' ? 'List View' : 'Grid View'}
            </button>
            <button
              onClick={onExport}
              className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </button>
            <button
              onClick={onShare}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 flex items-center gap-2"
            >
              <Share2 className="w-4 h-4" />
              Share
            </button>
          </div>
        </div>

        {/* Summary Cards */}
        {summary && (
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-white p-4 rounded-lg border border-gray-200">
              <div className="flex items-center">
                <BarChart3 className="w-8 h-8 text-blue-600" />
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-600">Total Analytics</p>
                  <p className="text-2xl font-bold text-gray-900">{summary.totalAnalytics}</p>
                </div>
              </div>
            </div>
            
            <div className="bg-white p-4 rounded-lg border border-gray-200">
              <div className="flex items-center">
                <PieChartIcon className="w-8 h-8 text-green-600" />
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-600">Visualizations</p>
                  <p className="text-2xl font-bold text-gray-900">{summary.totalCharts}</p>
                </div>
              </div>
            </div>
            
            <div className="bg-white p-4 rounded-lg border border-gray-200">
              <div className="flex items-center">
                <TrendingUp className="w-8 h-8 text-purple-600" />
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-600">Key Insights</p>
                  <p className="text-2xl font-bold text-gray-900">{summary.insights.length}</p>
                </div>
              </div>
            </div>
            
            <div className="bg-white p-4 rounded-lg border border-gray-200">
              <div className="flex items-center">
                <Activity className="w-8 h-8 text-orange-600" />
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-600">Data Quality</p>
                  <p className="text-2xl font-bold text-gray-900">95%</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Analytics Grid */}
      <div className={viewMode === 'grid' 
        ? "grid grid-cols-1 lg:grid-cols-2 gap-6" 
        : "space-y-6"
      }>
        {chartsData.map((chart) => (
          <div key={chart.id} className="bg-white rounded-lg border border-gray-200 overflow-hidden">
            {/* Chart Header */}
            <div className="p-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">{chart.title}</h3>
                  <p className="text-sm text-gray-600">{chart.description}</p>
                </div>
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => toggleChartExpansion(chart.id)}
                    className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg"
                    title={expandedCharts[chart.id] ? 'Collapse' : 'Expand'}
                  >
                    <Eye className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </div>

            {/* Chart Content */}
            <div className="p-4">
              <div className="flex justify-center">
                <ResponsiveContainer width="100%" height={expandedCharts[chart.id] ? 400 : 300}>
                  {getChartComponent(chart)}
                </ResponsiveContainer>
              </div>
            </div>

            {/* Insights */}
            {(chart.insights && chart.insights.length > 0) && (
              <div className="p-4 bg-gray-50 border-t border-gray-200">
                <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center gap-2">
                  <Info className="w-4 h-4" />
                  Key Insights
                </h4>
                <ul className="space-y-1">
                  {(chart.insights || []).map((insight, index) => (
                    <li key={index} className="text-sm text-gray-700 flex items-start gap-2">
                      <ArrowUpRight className="w-3 h-3 text-green-600 mt-0.5 flex-shrink-0" />
                      {typeof insight === 'string' ? insight : insight.text || insight.description || JSON.stringify(insight)}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Analytics Details Section */}
      {selectedAnalytic && (
        <div className="mt-8 bg-white rounded-lg border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            {selectedAnalytic.name} - Detailed Analysis
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Description</h4>
              <p className="text-gray-700">{selectedAnalytic.description}</p>
            </div>
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Methodology</h4>
              <p className="text-gray-700">{selectedAnalytic.methodology || 'Standard statistical analysis'}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AnalyticsDisplay;
